{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Como rodar o Projeto localmente.","text":""},{"location":"#pre-requisitos-para-rodar-aplicacao","title":"Pr\u00e9-requisitos para rodar aplica\u00e7\u00e3o","text":"<ul> <li>Docker Engine</li> <li>Docker Compose</li> </ul>"},{"location":"#primeira-maneira-de-execultar","title":"Primeira maneira de execultar:","text":""},{"location":"#make-up","title":"<code>make up</code>","text":"<p>Criar e subir todos os Containeres</p>"},{"location":"#make-clean","title":"<code>make clean</code>","text":"<p>Limpa todo seu ambiente</p>"},{"location":"#segunda-maneira","title":"Segunda maneira","text":""},{"location":"#docker-compose-up-build","title":"<code>docker-compose up --build</code>","text":""},{"location":"arquitetura/","title":"Aquitetura do projeto","text":"<p>A arquitetura geral foi dividido em 4 camadas:</p> Nome Defini\u00e7\u00e3o Client O client \u00e9 o nosso front, podendo ser web ou mobile Proxy reverso Camada intermediaria entre o client e api Banco de dados Camada responsavel pela base de dados <p></p>"},{"location":"backend/","title":"Backend","text":"<p>No \u00e2mbito do projeto de gerenciamento de um posto de gasolina, o backend foi constru\u00eddo com a poderosa combina\u00e7\u00e3o de tecnologias, com destaque para o framework NestJS, Docker e o banco de dados relacional Postgres.</p> <p>O NestJS foi escolhido como o principal framework para o backend devido \u00e0 sua estrutura modular, arquitetura baseada em m\u00f3dulos e a capacidade de integrar facilmente com bibliotecas externas. Seu uso proporciona uma organiza\u00e7\u00e3o clara e eficiente do c\u00f3digo, facilitando a manuten\u00e7\u00e3o e expans\u00e3o do sistema.</p> <p>Para garantir uma implementa\u00e7\u00e3o consistente e isolada do ambiente de desenvolvimento, produ\u00e7\u00e3o e testes, optou-se pelo uso do Docker. Com o Docker, foi poss\u00edvel encapsular o ambiente do NestJS, incluindo suas depend\u00eancias, em cont\u00eaineres independentes, assegurando consist\u00eancia entre diferentes ambientes e simplificando o processo de implanta\u00e7\u00e3o.</p> <p>O banco de dados escolhido foi o Postgres, um sistema de gerenciamento de banco de dados relacional conhecido por sua confiabilidade e desempenho. Utilizando o Docker Compose, foi poss\u00edvel orquestrar facilmente a configura\u00e7\u00e3o do ambiente, garantindo uma integra\u00e7\u00e3o tranquila entre o NestJS e o Postgres.</p> <p>A combina\u00e7\u00e3o do NestJS, Docker e Postgres proporcionou n\u00e3o apenas uma implementa\u00e7\u00e3o eficiente e escal\u00e1vel, mas tamb\u00e9m facilitou a manuten\u00e7\u00e3o e colabora\u00e7\u00e3o entre desenvolvedores. O NestJS, com seu sistema de inje\u00e7\u00e3o de depend\u00eancias e arquitetura modular, permitiu a constru\u00e7\u00e3o de endpoints RESTful de forma estruturada e f\u00e1cil de entender.</p> <p>Al\u00e9m disso, a utiliza\u00e7\u00e3o do Docker simplificou o processo de implanta\u00e7\u00e3o, garantindo que a aplica\u00e7\u00e3o seja executada de maneira consistente em diferentes ambientes, independentemente das configura\u00e7\u00f5es locais. A escolha do Postgres como banco de dados proporcionou uma base s\u00f3lida para armazenamento de dados, garantindo a integridade e a confiabilidade das informa\u00e7\u00f5es registradas pelos motoristas.</p> <p>Em resumo, a escolha do NestJS com Docker e Postgres no backend n\u00e3o apenas atendeu aos requisitos funcionais do projeto, mas tamb\u00e9m estabeleceu uma base s\u00f3lida para um sistema robusto, escal\u00e1vel e de f\u00e1cil manuten\u00e7\u00e3o. Essa combina\u00e7\u00e3o de tecnologias reflete o compromisso com as melhores pr\u00e1ticas de desenvolvimento e a busca por solu\u00e7\u00f5es eficientes e confi\u00e1veis.</p>"},{"location":"desafio/","title":"Desafio FluxStation","text":"<p>Desafio: Sistema de Gerenciamento de Posto de Gasolina</p> <p>Voc\u00ea foi designado para desenvolver um sistema b\u00e1sico de gerenciamento para um posto de gasolina, com foco em permitir que os motoristas registrem o abastecimento de combust\u00edvel e consultem seu hist\u00f3rico. Os requisitos funcionais incluem:</p> <p>Registro de Abastecimento:</p> <p>Motoristas podem registrar o abastecimento, especificando a quantidade de litros e o tipo de combust\u00edvel. O sistema deve calcular o valor total do abastecimento com base nos pre\u00e7os dos combust\u00edveis. Os registros de abastecimento devem ser armazenados em um hist\u00f3rico para cada motorista. Hist\u00f3rico de Abastecimentos:</p> <p>Motoristas podem visualizar seu hist\u00f3rico de abastecimentos, incluindo informa\u00e7\u00f5es detalhadas de cada registro, como a data do abastecimento. Desenvolvimento da Solu\u00e7\u00e3o: Tecnologias Desejadas:</p> <p>Frontend: React Typescript Backend: Node.js Banco de dados Relacional (Mysql ou Postgres) Destaque:</p> <p>Uso do Typescript. Implementa\u00e7\u00e3o do Framework NextJS no frontend. Implementa\u00e7\u00e3o do Framework NestJS no backend (NestJS \u00e9 espec\u00edfico para o backend e n\u00e3o est\u00e1 relacionado ao NextJS). Utiliza\u00e7\u00e3o do banco de dados Postgres. Requisitos T\u00e9cnicos:</p> <p>Crie um reposit\u00f3rio no GitHub para o projeto. Desenvolva uma aplica\u00e7\u00e3o web que inclua frontend e backend para atender aos requisitos funcionais. Implemente uma API Restful para a comunica\u00e7\u00e3o entre frontend e backend. Siga boas pr\u00e1ticas de desenvolvimento, incluindo organiza\u00e7\u00e3o de c\u00f3digo, testes, padr\u00e3o restful e documenta\u00e7\u00e3o. No README do reposit\u00f3rio, forne\u00e7a um passo a passo para a execu\u00e7\u00e3o da aplica\u00e7\u00e3o e uma breve explica\u00e7\u00e3o sobre como enfrentou o desafio. Este desafio visa avaliar suas habilidades no desenvolvimento full-stack, destacando o uso de tecnologias espec\u00edficas, boas pr\u00e1ticas e documenta\u00e7\u00e3o adequada. O uso de Typescript e dos frameworks NextJS e NestJS s\u00e3o pontos que se destacar\u00e3o na avalia\u00e7\u00e3o.</p>"},{"location":"frontend/","title":"Frontend","text":"<p>No \u00e2mbito do projeto de gerenciamento de um posto de gasolina, o frontend foi constru\u00eddo com tecnologias modernas e eficientes, destacando-se o framework Next.js, Docker e a biblioteca Styled Components.</p> <p>O uso do Next.js no frontend ofereceu uma abordagem \u00fanica e eficaz para o desenvolvimento de aplica\u00e7\u00f5es web. Sua arquitetura baseada em componentes, combinada com o conceito de p\u00e1ginas est\u00e1ticas e din\u00e2micas, proporcionou uma experi\u00eancia de desenvolvimento fluida e altamente modular.</p> <p>A escolha do Next.js n\u00e3o apenas otimizou o desempenho da aplica\u00e7\u00e3o, mas tamb\u00e9m facilitou a implementa\u00e7\u00e3o de funcionalidades avan\u00e7adas, como o pr\u00e9-renderiza\u00e7\u00e3o de p\u00e1ginas, melhorando significativamente o tempo de carregamento e a experi\u00eancia do usu\u00e1rio.</p> <p>A integra\u00e7\u00e3o do Docker no ambiente de desenvolvimento do frontend trouxe benef\u00edcios significativos. Ao encapsular o ambiente em cont\u00eaineres, conseguimos garantir consist\u00eancia entre diferentes ambientes e simplificar o processo de implanta\u00e7\u00e3o. Essa abordagem \u00e9 particularmente valiosa ao colaborar com outros desenvolvedores ou ao migrar a aplica\u00e7\u00e3o para diferentes ambientes de hospedagem.</p> <p>A biblioteca Styled Components foi escolhida para lidar com a estiliza\u00e7\u00e3o do frontend. Essa abordagem baseada em componentes permite a cria\u00e7\u00e3o de estilos din\u00e2micos e reutiliz\u00e1veis diretamente no n\u00edvel dos componentes React, melhorando a legibilidade do c\u00f3digo e facilitando a manuten\u00e7\u00e3o.</p> <p>A utiliza\u00e7\u00e3o de Styled Components tamb\u00e9m proporcionou a cria\u00e7\u00e3o de uma interface de usu\u00e1rio elegante e responsiva, permitindo uma experi\u00eancia visual agrad\u00e1vel para os usu\u00e1rios finais. A capacidade de estilizar componentes de forma isolada e reutiliz\u00e1vel tornou a manuten\u00e7\u00e3o do c\u00f3digo de estilo mais eficiente e f\u00e1cil de escalar.</p>"}]}